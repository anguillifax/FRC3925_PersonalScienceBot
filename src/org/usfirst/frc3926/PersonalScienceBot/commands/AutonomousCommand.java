// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3926.PersonalScienceBot.commands;

import org.usfirst.frc3926.PersonalScienceBot.Robot;
import org.usfirst.frc3926.PersonalScienceBot.subsystems.DriveTrain;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class  AutonomousCommand extends Command {
	protected double startAngle = 0;
	protected final double startTime = Timer.getFPGATimestamp();
	AHRS navx;
	DriveTrain driveTrain;
    public AutonomousCommand() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	navx = Robot.navx;
    	driveTrain = Robot.driveTrain;
    	startAngle = navx.getAngle();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	while (getTime() < startTime + 1) {
    		driveTrain.setRawSpeeds(.1d, .3d);
		}
    	
    	SmartDashboard.putNumber("FPGA_Timestamp", Timer.getFPGATimestamp());
    	SmartDashboard.putNumber("StartTime", startTime);
    	SmartDashboard.putNumber("GetTime", getTime());
    	
    }
    
    protected double getTime() {
    	return startTime + Timer.getFPGATimestamp();
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
